Michael Palumbo (mp3492)
CS281-B

Problem 1:

Hex: AFBE0018

Binary: 101011 11101 11110 0000 0000 0001 1000

check I-TYPE
[ op     | rs     | rt     | imm     ]
[ 6 bits | 5 bits | 5 bits | 16 bits ]

Seperating:

[ op     | rs     | rt    | imm     ]
[ 101011 | 11101  | 11110 | 0000 0000 0001 1000 ]

op - 101011 - 2b - SW
rs - 11101 - 29 - $sp
rt - 11110 - 30 - $fp
imm- 0000 0000 0001 1000 - 24 - 0x18 

sw $fp 0x18($sp)

Problem 2:
$a0 register is the value of the first argument. We would want to remember a0 for multiple occasionans. The major one is we want to call a function. When calling a function we allow them to have permission to use a0 however they want. So to not lose the value, we need to push it onto the stack and pull it back to a0 once whatever function call is returned.

Problem 3:

Branch commands are I-TYPE
in I-TYPE, imm is 16 bits. 
(note we can change up to 18 bits in memory, but since we are counting instructions, aka words, we are basically dividing by 4 anyhow. So keeping the number at 16 bits)

The left most bit is also signed, so really we only can move 15 bits

0111 1111 1111 1111
is 0x 7FFF
or in decimal
32767

I would also say we add 1, but since you said in between, I assume you don't count the target destination. Which makes it a total of 32767 words we can jump to.

Problem 4:

Explaining the code:
We use recursion to sum up every number in a number, so like 5 is 5+4+3+2+1+0

int sum (int n){
	if (n == 0)
		return n;
	else
		return (n + sum(n-1));
}

sum:
	sub $sp,$sp,8 # push 2 words on stack
	sw $ra,4($sp) # save return address
	sw $a0,0($sp) # save n
	bne $a0,$zero,R1 # branch if n != 0
	add $v0,$zero, $a0 # return 1
	add $sp,$sp,8 # pop 2 words off stack
	jr $ra # return to calling procedure
R1:
	sub $a0,$a0,1 # set first argument to n-1
	jal fact # recursive call sum(n-1)
	lw $a0,0($sp) # restore previous value of n
	lw $ra,4($sp) # restore previous return addr
	add $v0,$a0,$v0 # return n + sum(n-1)
	add $sp,$sp,8 # pop 2 words off stack
	jr $ra # return to calling procedure

"Include instructions to use the stack properly"
The stack is upside down, so to add push words, we minus the pointer and allow for words to be used for that space. And to pop words we add to the pointer. We never delete them, but we tell ourselves that they no longer exist.
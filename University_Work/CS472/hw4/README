# Michael Palumbo
# CS472
# November 3rd, 2021

## Running: (uneditted)

You can run the code in command like with:
./server.py <log file> <port>
or 
python3 servery.py <log file> <port>

the command should be followed by a file you want to write the log to, and the port

eg: ./server.py log 2121

** NOTICE ** 
Credentials:
- Username is cs472
- Password is hw3. 
(This info can also be found in the credentials file)

## Files (uneditted)

The main program is located in the server.py program.
- In comments I wrote "#NEW_INFO" on pieces of code that is new since the last assignment.

Credentials for log in are saved in credentials

The sample server log run is saved to server_log

ftpserverd.conf

## Commands:

This code can run all the commands from the previous assignment:
pass, syst,pasv, epsv, port, erpt, ls, quit, pwd, cdup, get, put, cwd

## Questions:
1.
    A. What are the security considerations with port_mode?
    
    Port_mode works by a client opening a port locally, and having the server connect to the port. This raises security concerns such as firewalls and amounts of ports. Unlike passive, the client is responsible of naming a port, this could cause conflictions with other clients already using a certain port. I also found that operating systems put up firewalls that made coding ftp servers troubling, as the os refused to allow the port command to send.

    B. With pasv_mode? 
    
    Pasv_mode works by the server openning a port and accepting the server connection. This raises security concerns such as 

    C.Why would I want one or the other? Think of the conversation between client and server.

2. How does NAT changes the FTP implementation – is it a good thing that an application knows about IP addresses?

Honestly makes it quite harder, NAT, is particulary the reason why I find it difficult to test on my local machine, instead of using something like tux. NAT refuses my machine to be in active mode, since it refuses to listen on a port for a server.

### Part B – Logging
3. What did you find in your server logging? Did it help you find out problems? Why?

Similairy to how i used wireshark, I used the logger (or at the time, and simple version of it) to track what is being sent, but more importantly what was being recieved. This allowed me to build my server step by step, seeing what the client was asking of me, and I could code the server to properly respond.

It's also interesting to note that, with multithreading, the logging broke due to the fact that multiple processors were trying to write to the log file at the same time. This was resolved when I realized all I had to do was lock the function while a thread was using it, so another thread couldn't call the same function.

4. Do you think you should have “levels” of logging in your server?

I am not terribly what this question is referring to as levels..? Is it like the type of information being sent? Such as, one level would just be connections of new clients, and another level would be commands that are being send between. If that's the case, then i can see such levels as useful for a debugger, allowing them to quickly sort and search through their logs to know what is wrong.

If the levels refers to amount of information being sent? Such as, one level would be simple commands, and a sublevel would be amount of data that was tranferred because of said command. This is useful because we can look at an upper level for quick information, but if we wanted to look at more indepth, making sure all the data is being tranferred, then we can look at a sublevel.

### Part C – Securing the connection with SSL/TLS
5. What are the different issues with securing the connections with IMPLICIT mode (which
is a separate server listening with TLS always at port 990 by default) and EXPLICIT
mode (which is the same server waiting on port 21 for special commands to turn TLS on
and off)? What are the “it depends” part of the tradeoffs? Think of the data that you’re
transporting, both on the command channel and data channel.

Explicit allows the user to have control of the encryption, which is useful sometimes, cause users might not want that. Since if its forced, it might make it harder to debug, and might add additional steps when developing that isn't needed.

Implicit mode makes it forced, so you have to expect that information that the server recieves will be encrypted. This is good when it comes important servers, such as big corperations or government. Users ofcourse should not have control of whether the information doesn't need to be encyrpted.

### Part D – Analyzing the conversation
**EXTRA CREDIT** (worth up to 15 points): Think of the conversation of FTP and compare it to
other file transfer protocols
 SFTP – offers the service on port 22 and data and commands share the same channel
– better or worse?
 BitTorrent – offers files from a large number of hosts.
What are the good points and bad points of each approach (FTP, SFTP, BitTorrent)?

FTP - is quick and and easy, though just alone, it has no security and anyone sniffing for packets can get any information transferred.

SFTP - Is less quick and easy, it requires more setup, eg, user needs an account. Though we are now much more secure compared to FTP.

Bittorrent - Means we pull from many more sources, and we don't neccessarily guarentee that our information is correct.

### Part E – Analyzing the operation of the server
6. Do you think there are events that you’ve logged which show that someone is trying to
break into your server? Do you have to add other log entries and checking to make sure
that attacks aren’t happening? Brainstorm some attacks against your FTP server. For at
least one of them, implement additional code to check for them and log appropriate
entries. NOTE THIS IN THE CODE THAT YOU SUBMIT 

I can imagine 2 "simple" attacks that would be presented in a log file. One is if a client constantly connects, inputting something random for username and credentials. A server could resolve this by checking capping the amount of login attempts before a successful one.

Another problem could be if a after asking for a port to connect to, someone else, who is sniffing the packets, could connect to that port before the client can, allowing them to send or recieve information from that port. You can resolve this by checking at the dataport part, if the connect ip is the same as the ip that had first connected to the server, if they don't match, then don't accept the data transfer.
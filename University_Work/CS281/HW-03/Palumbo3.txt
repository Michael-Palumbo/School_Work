
QUESTION 1:
-----------------------------------------------------------------------------
Translate
C Code:
int fib(int n) {
	if (n==0)
		return 0;
	else if (n == 1)
		return 1;
	else return fib(n-1) + fib(n-2);
}

Into MIPS

MIPS: (I used the factorial function given in lecture notes as the baseline)

fact:
	sub $sp,$sp,8 		# push stack
	sw $ra,4($sp) 		# record return address
	sw $a0,0($sp) 		# record n

	slt $t0,$a0,2 		# test n < 2 ? 1 : 0
	beq $t0,$zero,L1 	# 0 branch since n >= 2

	beq $a, $zero, L2 	# n itself is 0

	addi $v0, $zero, 1 	# return 1
	addi $sp, $sp, 8 	# pop stack
	jr $ra 			# return to calling procedure

L2:
	addi $v0, $zero, 0	# return 0
	addi $sp, $sp, 8	# pop stack
	jr $ra			# return to calling procedure

L1:
	sub $a0,$a0,1 		# set parameter to n-1
	jal fib			# call fib(n-1)

	lw $a0,0($sp) 		# restore previous value of n
	
	sw $v0, 0($sp)		# record branching return values for sum

	addi $a0, $a0, -2	# set parameter to n-2
	jal fib			# call fib(n-2)

	lw $t1, 0($sp)		# get the return value from the first fib call
	add $v0, $v0, $t1	# add them together, so fib(n-1) + fib(n-2)	

	lw $ra,4($sp) 		# restore previous return addr	
	addi $sp,$sp,8 		# pop stack
	jr $ra 			# return to calling procedure


QUESTION 2:
-----------------------------------------------------------------------------
Translate the code
C Code:
int f(int a, int b, int c, int d){
	return func(func(a,b), c+d))
}

(restructured)
int f(int a, int b, int c, int d){
	t0 = func(a,b)
	t1 = c+d
	return func(t0, t1) # not actual variables, just planning in my head
}

Into MIPS 
MIPS Code:
a:a0  b:a1  c:a2  d:a3
f:
	addi $sp, $sp, -8	# allow us to push 2 words
	sw $ra 0($sp) 		# record return address
	
	add $t0, $a2, $a3 	# t0 = c+d
	sw $t0 4($sp)		# record t0
	
	jal func		# func(a,b): note a0 and a1 already have a and b

	addi $a0, $v0, 0	# save return variable to a0
	lw $a1, 4($sp) 		# a1 = t0 which is c+d

	jal func		# a0 is now the return of func(a,b) and a1 is c+d
				# which will store to v0 so don't need to do anything after
	lw $ra, 0($sp)		# restore the return address
	addi $sp, $sp, 8	# pop our variables
	jr $ra 			

QUESTION 3:
-----------------------------------------------------------------------------
Write a function in c that finds the maximum value of an integer array:
m = max(int *a, int n)

C code:
int largest(int arr[], int n) 
{ 
    int i; 
    int max = arr[0]; 
    for (i = 1; i < n; i++) 
        if (arr[i] > max) 
            max = arr[i];   
    return max; 
} 

MIPS

#a0 is the array, a1 = n, s0 = i, s1 = max

MAX:
	addi $s0, $zero, 0	#s0 = i which is 0
	sw $s1, 0($a0)		#s1 = a0[0]

	j LOOP
LOOP:
	sll $t1, $s0, 2		# translate i into pointer for words
	add $t1, $t1, $a0	# a0Pointer = i+array
	lw $t0, 0($t1)		# t0 = a[i]
	
	slt $t2, $t0, $s1	# a[i] < max ? 1 : 0
	beq $t2, $zero, GREATLOOP # max is not greater than a[i]

	beq $s0, $a1, EXIT	# if n == s1 

	addi $s0, $s0, 1 	# i++
	j LOOP

GREATLOOP:
	sll $t1, $s0, 2		# translate i into pointer for words
	add $t1, $t1, $a0	# a0Pointer = i+array
	lw $s1, 0($t1)		# max = a[i]
	j loop			# return back to your loop


EXIT:
	addi $v0, $s1, 0 	# return s1 which is max
	jr $ra			# return to caller
	